// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"github.com/id-tarzanych/lets-go-chat/configurations"
	"github.com/id-tarzanych/lets-go-chat/db"
	"github.com/id-tarzanych/lets-go-chat/db/message"
	"github.com/id-tarzanych/lets-go-chat/db/token"
	"github.com/id-tarzanych/lets-go-chat/db/user"
	"github.com/sirupsen/logrus"
	"gorm.io/gorm"
	"os"
)

// Injectors from wire.go:

func InitializeApp(config *configurations.Configuration) (Application, error) {
	fieldLogger := ProvideLogger()
	db, err := ProvideDb(config, fieldLogger)
	if err != nil {
		return Application{}, err
	}
	userRepository, err := ProvideUserRepo(db)
	if err != nil {
		return Application{}, err
	}
	tokenRepository, err := ProvideTokenRepo(db)
	if err != nil {
		return Application{}, err
	}
	messageRepository, err := ProvideMessageRepo(db)
	if err != nil {
		return Application{}, err
	}
	application := ProvideApp(config, db, fieldLogger, userRepository, tokenRepository, messageRepository)
	return application, nil
}

// wire.go:

func ProvideApp(
	cfg *configurations.Configuration,
	dbPool *gorm.DB,

	logger logrus.FieldLogger,

	userRepo user.UserRepository,
	tokenRepo token.TokenRepository,
	messageRepo message.MessageRepository,
) Application {
	return Application{
		config: cfg,
		db:     dbPool,
		logger: logger,

		userRepo:    userRepo,
		tokenRepo:   tokenRepo,
		messageRepo: messageRepo,
	}
}

func ProvideLogger() logrus.FieldLogger {
	logger := logrus.New()
	logger.SetOutput(os.Stdout)

	return logger
}

func ProvideDb(config *configurations.Configuration, logger logrus.FieldLogger) (*gorm.DB, error) {
	switch db.DbType(config.Database.Type) {
	case db.Postgres:
		logger.Println("Using PostgreSQL database...")

		return db.NewPostgresSession(config.Database)
	default:
		logger.Println("Unrecognized database type! Fallback to in-memory database!")

		return db.NewInMemorySession()
	}
}

func ProvideUserRepo(db2 *gorm.DB) (user.UserRepository, error) {
	return user.NewDatabaseUserRepository(db2)
}

func ProvideTokenRepo(db2 *gorm.DB) (token.TokenRepository, error) {
	return token.NewDatabaseTokenRepository(db2)
}

func ProvideMessageRepo(db2 *gorm.DB) (message.MessageRepository, error) {
	return message.NewDatabaseMessageRepository(db2)
}
