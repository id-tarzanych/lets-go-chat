// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/id-tarzanych/lets-go-chat/models"
	mock "github.com/stretchr/testify/mock"

	time "time"

	types "github.com/id-tarzanych/lets-go-chat/internal/types"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, u
func (_m *UserRepository) Create(ctx context.Context, u *models.User) error {
	ret := _m.Called(ctx, u)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.User) error); ok {
		r0 = rf(ctx, u)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, id
func (_m *UserRepository) Delete(ctx context.Context, id types.Uuid) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.Uuid) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: ctx
func (_m *UserRepository) GetAll(ctx context.Context) ([]models.User, error) {
	ret := _m.Called(ctx)

	var r0 []models.User
	if rf, ok := ret.Get(0).(func(context.Context) []models.User); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: ctx, id
func (_m *UserRepository) GetById(ctx context.Context, id types.Uuid) (models.User, error) {
	ret := _m.Called(ctx, id)

	var r0 models.User
	if rf, ok := ret.Get(0).(func(context.Context, types.Uuid) models.User); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, types.Uuid) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUserName provides a mock function with given fields: ctx, name
func (_m *UserRepository) GetByUserName(ctx context.Context, name string) (models.User, error) {
	ret := _m.Called(ctx, name)

	var r0 models.User
	if rf, ok := ret.Get(0).(func(context.Context, string) models.User); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, u
func (_m *UserRepository) Update(ctx context.Context, u *models.User) error {
	ret := _m.Called(ctx, u)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.User) error); ok {
		r0 = rf(ctx, u)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateLastActivity provides a mock function with given fields: ctx, u, lastActivity
func (_m *UserRepository) UpdateLastActivity(ctx context.Context, u *models.User, lastActivity time.Time) error {
	ret := _m.Called(ctx, u, lastActivity)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.User, time.Time) error); ok {
		r0 = rf(ctx, u, lastActivity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
