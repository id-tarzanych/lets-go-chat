// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/id-tarzanych/lets-go-chat/models"
	mock "github.com/stretchr/testify/mock"

	types "github.com/id-tarzanych/lets-go-chat/internal/types"
)

// TokenRepository is an autogenerated mock type for the TokenRepository type
type TokenRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, u
func (_m *TokenRepository) Create(ctx context.Context, u *models.Token) error {
	ret := _m.Called(ctx, u)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Token) error); ok {
		r0 = rf(ctx, u)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, _a1
func (_m *TokenRepository) Delete(ctx context.Context, _a1 string) error {
	ret := _m.Called(ctx, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, _a1
func (_m *TokenRepository) Get(ctx context.Context, _a1 string) (models.Token, error) {
	ret := _m.Called(ctx, _a1)

	var r0 models.Token
	if rf, ok := ret.Get(0).(func(context.Context, string) models.Token); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(models.Token)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: ctx
func (_m *TokenRepository) GetAll(ctx context.Context) ([]models.Token, error) {
	ret := _m.Called(ctx)

	var r0 []models.Token
	if rf, ok := ret.Get(0).(func(context.Context) []models.Token); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Token)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUserId provides a mock function with given fields: ctx, userId
func (_m *TokenRepository) GetByUserId(ctx context.Context, userId types.Uuid) ([]models.Token, error) {
	ret := _m.Called(ctx, userId)

	var r0 []models.Token
	if rf, ok := ret.Get(0).(func(context.Context, types.Uuid) []models.Token); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Token)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, types.Uuid) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
